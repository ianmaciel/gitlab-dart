// Mocks generated by Mockito 5.0.16 from annotations
// in gitlab/test/src/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:typed_data' as _i4;

import 'package:gitlab/gitlab.dart' as _i2;
import 'package:gitlab/src/http_client.dart' as _i6;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeProjectsApi_0 extends _i1.Fake implements _i2.ProjectsApi {}

class _FakeUri_1 extends _i1.Fake implements Uri {}

class _FakeResponse_2 extends _i1.Fake implements _i3.Response {}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse extends _i1.Mock implements _i3.Response {
  MockResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Uint8List get bodyBytes =>
      (super.noSuchMethod(Invocation.getter(#bodyBytes),
          returnValue: _i4.Uint8List(0)) as _i4.Uint8List);
  @override
  String get body =>
      (super.noSuchMethod(Invocation.getter(#body), returnValue: '') as String);
  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GitLab].
///
/// See the documentation for Mockito's code generation for more information.
class MockGitLab extends _i1.Mock implements _i2.GitLab {
  MockGitLab() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get token =>
      (super.noSuchMethod(Invocation.getter(#token), returnValue: '')
          as String);
  @override
  _i2.AuthorizationTokenType get tokenType =>
      (super.noSuchMethod(Invocation.getter(#tokenType),
              returnValue: _i2.AuthorizationTokenType.private)
          as _i2.AuthorizationTokenType);
  @override
  String get host =>
      (super.noSuchMethod(Invocation.getter(#host), returnValue: '') as String);
  @override
  String get scheme =>
      (super.noSuchMethod(Invocation.getter(#scheme), returnValue: '')
          as String);
  @override
  bool get assumeUtf8 =>
      (super.noSuchMethod(Invocation.getter(#assumeUtf8), returnValue: false)
          as bool);
  @override
  _i2.ProjectsApi project(int? id) =>
      (super.noSuchMethod(Invocation.method(#project, [id]),
          returnValue: _FakeProjectsApi_0()) as _i2.ProjectsApi);
  @override
  _i5.Future<dynamic> request(Uri? uri,
          {_i2.HttpMethod? method = _i2.HttpMethod.get,
          String? body,
          bool? asJson = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #request, [uri], {#method: method, #body: body, #asJson: asJson}),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  Uri buildUri(Iterable<String>? pathSegments,
          {Map<String, dynamic>? queryParameters, int? page, int? perPage}) =>
      (super.noSuchMethod(
          Invocation.method(#buildUri, [
            pathSegments
          ], {
            #queryParameters: queryParameters,
            #page: page,
            #perPage: perPage
          }),
          returnValue: _FakeUri_1()) as Uri);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GitLabHttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class BaseMockGitLabHttpClient extends _i1.Mock
    implements _i6.GitLabHttpClient {
  BaseMockGitLabHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Response> request(
          Uri? uri, Map<String, String>? headers, _i2.HttpMethod? method) =>
      (super.noSuchMethod(Invocation.method(#request, [uri, headers, method]),
              returnValue: Future<_i3.Response>.value(_FakeResponse_2()))
          as _i5.Future<_i3.Response>);
  @override
  String toString() => super.toString();
}
